{"version":3,"sources":["components/ControlPanel.tsx","components/PokemonViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","setPokemon","pokemon","Col","Button","onClick","items","POKEMON","Math","floor","random","length","className","PokemonViewer","useState","score","setScore","Image","src","thumbnail","response","window","prompt","toLowerCase","Name","alert","App","activePokemon","setActivePokemon","Container","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAcO,SAASA,EAAT,KAAmH,IAA5FC,EAA2F,EAA3FA,WAA2F,EAA3CC,QAG1E,OAAO,eAACC,EAAA,EAAD,WACP,6CAIA,cAACC,EAAA,EAAD,CAAQC,QACJ,kBAAMJ,GAjBeK,EAiBaC,GAhBzBC,KAAKC,MAAMD,KAAKE,SAASJ,EAAMK,UADhD,IAA6BL,GAkBxBM,UAAY,MAFb,6B,YCjBG,SAASC,EAAT,GAAoE,IAA5CX,EAA2C,EAA3CA,QAC3B,EAA0BY,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,OACI,iCACI,eAACb,EAAA,EAAD,WACA,gDACA,yCAAYY,KACZ,8BAAK,cAACE,EAAA,EAAD,CAAOC,IAAOhB,EAAQe,MAAOE,WAAS,SAE3C,cAACf,EAAA,EAAD,CAAQC,QACZ,WAAO,IAAIe,EAAWC,OAAOC,OAAO,2BACpB,OAARF,QAAQ,IAARA,OAAA,EAAAA,EAAUG,gBAAiBrB,EAAQsB,MACnCC,MACI,YAEJT,EAASD,EAAM,IAGfU,MACI,eAIfb,UAAY,MAdL,sB,0BCOGc,MAZf,WACE,MAA0CZ,mBAAkBP,EAAQ,IAApE,mBAAOoB,EAAP,KAAsBC,EAAtB,KACA,OACE,cAACC,EAAA,EAAD,CAAWjB,UAAY,MAAvB,SACE,eAACkB,EAAA,EAAD,WACA,cAAC9B,EAAD,CAAcC,WAAY2B,IAC1B,cAACf,EAAD,CAAeX,QAASyB,UCDfI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.16f2f9c0.chunk.js","sourcesContent":["import {Button, Col} from 'react-bootstrap';\r\nimport { Pokemon } from '../interfaces/pokemon';\r\nimport POKEMON from '../assets/pokemon.json';\r\nimport { useState } from 'react';\r\n\r\n\r\nfunction getRandomElement<T>(items: T[]): T {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}\r\n\r\n//function whoseThat({pokemon}: {pokemon: Pokemon}): string {\r\n  //  return pokemon.Name\r\n//}\r\n\r\nexport function ControlPanel({setPokemon}: {setPokemon: (c: Pokemon)=> void},{pokemon}: {pokemon: Pokemon}): JSX.Element {\r\n    \r\n    \r\n    return <Col>\r\n    <h1>Poke Picker</h1>\r\n    \r\n    \r\n    \r\n    <Button onClick = {\r\n        () => setPokemon(getRandomElement(POKEMON))\r\n    }className = \"m-4\">Next Pokemon</Button>\r\n    \r\n\r\n\r\n    </Col>\r\n}","import React, {useState} from 'react';\r\nimport {Button, Col} from 'react-bootstrap';\r\nimport {Pokemon} from '../interfaces/pokemon';\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nexport function PokemonViewer({pokemon}: {pokemon: Pokemon}): JSX.Element {\r\n    const [score, setScore] = useState(0);\r\n    return(\r\n        <main>\r\n            <Col>\r\n            <h1>Pokemon Viewer</h1>\r\n            <h2>Score: {score}</h2>\r\n            <div><Image src = {pokemon.Image} thumbnail/></div>\r\n            </Col>\r\n            <Button onClick = {\r\n        () => {var response = window.prompt(\"Who's that pokemon?!: \")\r\n            if (response?.toLowerCase() == pokemon.Name){\r\n                alert(\r\n                    \"Correct!\"\r\n                )\r\n                setScore(score+1);\r\n            }\r\n            else{\r\n                alert(\r\n                    \"Incorrect!\"\r\n                )\r\n            }\r\n    }\r\n    }className = \"m-4\">Guess</Button>\r\n        </main>\r\n    )\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport POKEMON from './assets/pokemon.json';\nimport { ControlPanel } from './components/ControlPanel';\nimport { PokemonViewer } from './components/PokemonViewer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row} from 'react-bootstrap';\nimport { Pokemon } from './interfaces/pokemon';\n\nfunction App(): JSX.Element {\n  const [activePokemon, setActivePokemon] = useState<Pokemon>(POKEMON[0]);\n  return (\n    <Container className = \"App\">\n      <Row>\n      <ControlPanel setPokemon={setActivePokemon}></ControlPanel>\n      <PokemonViewer pokemon={activePokemon}></PokemonViewer>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}